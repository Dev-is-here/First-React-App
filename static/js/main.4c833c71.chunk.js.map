{"version":3,"sources":["images/react-movie-logo.svg","images/tmdb_logo.svg","components/Header/Header.styles.js","components/Header/index.js","config.js","components/HeroImage/HeroImage.styles.js","components/HeroImage/index.js","components/Grid/Grid.styles.js","components/Grid/index.js","components/Thumb/Thumb.styles.js","components/Thumb/index.js","components/Spinner/index.js","components/Spinner/Spinner.styles.js","images/search-icon.svg","components/SearchBar/SearchBar.styles.js","components/SearchBar/index.js","components/Button/Button.styles.js","components/Button/index.js","API.js","helpers.js","hooks/useHomeFetch.js","images/no_image.jpg","components/Home.js","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/index.js","components/MovieInfoBar/MovieInfoBar.styles.js","components/MovieInfoBar/index.js","components/Actor/Actor.styles.js","components/Actor/index.js","components/BreadCrumb/BreadCrumb.styles.js","components/BreadCrumb/index.js","components/Movie.js","hooks/useMovieFetch.js","components/NotFound.js","GlobalStyle.js","App.js","index.js"],"names":["Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","Header","to","src","RMDBLogo","alt","TMDBLogo","require","config","API_URL","API_KEY","process","console","log","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","image","Text","HeroImage","title","text","Grid","header","children","Image","Thumb","movieId","clickable","atl","Spinner","SearchBar","setSearchTerm","useState","state","setState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","event","currentTarget","value","button","Button","callback","onClick","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","rateMovie","rating","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","isPersistedState","stateName","sessionState","sessionStorage","getItem","parse","initialState","results","total_pages","tota_results","Home","loading","setLoading","error","setError","isLoadingMore","setLoadingMore","API","movies","prev","setItem","useHomeFetch","backdrop_path","original_title","overview","map","movie","poster_path","NoImage","id","backdrop","MovieInfo","className","vote_average","directors","length","director","name","credit_id","MovieInfoBar","budget","revenue","Actor","character","imageUrl","BreadCrumb","movieTitle","Movie","credits","crew","filter","member","job","actors","cast","useMovieFetch","useParams","runtime","actor","profile_path","NotFound","GlobalStyle","createGlobalStyle","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c833c71.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/react-movie-logo.35f4d399.svg\";","export default __webpack_public_path__ + \"static/media/tmdb_logo.e7029961.svg\";","import styled  from 'styled-components';\r\n\r\nexport const Wrapper=styled.div `\r\n\r\n        background: var(--darkGrey);\r\n        padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n\r\ndisplay: flex;\r\nalign-items: center;\r\njustify-content: space-between;\r\nmax-width: var(--maxWidth);\r\npadding: 20px 0;\r\nmargin: 0 auto;\r\n`;\r\n\r\nexport const LogoImg = styled.img`\r\n\r\n        width: 200px;\r\n        @media screen and (max-width: 500px){\r\n            width: 150px;\r\n        }\r\n`;\r\n\r\nexport const TMDBLogoImg = styled.img`\r\n\r\n        width: 100px;\r\n        @media screen and (max-width: 500px){\r\n            width: 80px;\r\n        }\r\n\r\n`;\r\n\r\n\r\n","import { React } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport RMDBLogo from \"../../images/react-movie-logo.svg\";\r\n\r\nimport TMDBLogo from \"../../images/tmdb_logo.svg\";\r\n\r\nimport { Wrapper, Content, LogoImg, TMDBLogoImg } from \"./Header.styles\";\r\n\r\nconst Header = () => (\r\n  <Wrapper>\r\n    <Content>\r\n      <Link to=\"/\">\r\n        <LogoImg src={RMDBLogo} alt=\"rmdb-logo\" />\r\n      </Link>\r\n      <TMDBLogoImg src={TMDBLogo} alt=\"tmdb-logo\" />\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\nexport default Header;\r\n","// Configuration for TMDB API\r\n// Read more about the API here: https://developers.themoviedb.org/\r\nrequire('dotenv').config();\r\nconst API_URL = 'https://api.themoviedb.org/3/';\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\nconsole.log(\"key is \", API_KEY);\r\n\r\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\r\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\r\n// For login and voting\r\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\r\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\r\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\r\n\r\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\r\n// Sizes: w300, w780, w1280, original\r\nconst BACKDROP_SIZE = 'w1280';\r\n// w92, w154, w185, w342, w500, w780, original\r\nconst POSTER_SIZE = 'w780';\r\n\r\nexport {\r\n  SEARCH_BASE_URL,\r\n  POPULAR_BASE_URL,\r\n  API_URL,\r\n  API_KEY,\r\n  IMAGE_BASE_URL,\r\n  BACKDROP_SIZE,\r\n  POSTER_SIZE,\r\n  REQUEST_TOKEN_URL,\r\n  LOGIN_URL,\r\n  SESSION_ID_URL,\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  background: linear-gradient(\r\n      to bottom,\r\n      rgba(0, 0, 0, 0) 41%,\r\n      rgba(0, 0, 0, 0.65) 100%\r\n    ),\r\n    url(${({ image }) => image}), var(--darkGrey);\r\n  background-size: 100%, cover;\r\n  background-position: center;\r\n  height: 600px;\r\n  position: relative;\r\n  animation: animateHeroImage 1s;\r\n\r\n  @keyframes animateHeroImage {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  padding: 20px;\r\n  max-width: var(--maxWidth);\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const Text = styled.div`\r\n  z-index: 100;\r\n  max-width: 700px;\r\n  position: absolute;\r\n  bottom: 40px;\r\n  margin-right: 20px;\r\n  min-height: 100px;\r\n  color: var(--white);\r\n\r\n  h1 {\r\n    font-size: var(--fontSuperBig) @media screen and (max-width: 720px) {\r\n      font-size: var(--fontBig);\r\n    }\r\n  }\r\n  p {\r\n    font-size: var(--fontMed);\r\n    @media screen and (max-width: 720px) {\r\n      font-size: var(--fontSmall);\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 720px) {\r\n    max-width: 100%;\r\n  }\r\n`;\r\n","import { React } from \"react\";\r\n\r\n// Styles\r\nimport { Wrapper, Content, Text } from \"./HeroImage.styles\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nconst HeroImage = ({ image, title, text }) => (\r\n  <Wrapper image={image}>\r\n    <Content>\r\n      <Text>\r\n        <h1>{title}</h1>\r\n        <p>{text}</p>\r\n      </Text>\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\n// Typechecking\r\nHeroImage.propTypes = {\r\n  image: PropTypes.string,\r\n  text: PropTypes.string,\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default HeroImage;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: var(--maxWidth);\r\n  margin: 0 auto;\r\n  padding: 0 20px;\r\n  h1 {\r\n    color: var(--medGrey);\r\n    @media screen and (max-width: 768px) {\r\n      font-size: var(--fontBig);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  grid-gap: 2rem;\r\n`;\r\n","import React from \"react\";\r\n\r\n// styles\r\n\r\nimport { Wrapper, Content } from \"./Grid.styles\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nconst Grid = ({ header, children }) => (\r\n  <Wrapper>\r\n    <h1>{header}</h1>\r\n    <Content>{children}</Content>\r\n  </Wrapper>\r\n);\r\n\r\n//Typechecking\r\nGrid.propTypes = {\r\n  header: PropTypes.string,\r\n};\r\n\r\nexport default Grid;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Image = styled.img`\r\n  width: 100%;\r\n  max-width: 720px;\r\n  transition: all 0.3s;\r\n  object-fit: cover;\r\n  border-radius: 20px;\r\n  animation: animateThumb 0.5s;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  @keyframes animateThumb {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n// styles\r\nimport { Image } from \"./Thumb.styles\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nconst Thumb = ({ image, movieId, clickable }) => (\r\n  <div>\r\n    {clickable ? (\r\n      <Link to={`/${movieId}`}>\r\n        {/* {console.log(`/${movieId}`)} */}\r\n        <Image src={image} atl=\"movie-thumb\" />\r\n      </Link>\r\n    ) : (\r\n      <Image src={image} atl=\"movie-thumb\" />\r\n    )}\r\n  </div>\r\n);\r\n\r\n// Typechecking\r\nThumb.propTypes = {\r\n  image: PropTypes.string,\r\n  movieId: PropTypes.number,\r\n  clickable: PropTypes.bool,\r\n};\r\nexport default Thumb;\r\n","import { Spinner } from \"./Spinner.styles\";\r\n\r\nexport default Spinner;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Spinner = styled.div`\r\n  border: 5px solid var(--lightGrey);\r\n  border-top: 5px solid var(--medGrey);\r\n  border-radius: 50%;\r\n  width: 50px;\r\n  height: 50px;\r\n  animation: spin 0.8s linear infinite;\r\n  margin: 20px auto;\r\n\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(300deg);\r\n    }\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/search-icon.bb4c697f.svg\";","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  height: 100px;\r\n  background: var(--darkGrey);\r\n  padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  position: relative;\r\n  max-width: var(--maxWidth);\r\n  width: 100%;\r\n  height: 55px;\r\n  background: var(--medGrey);\r\n  margin: 0 auto;\r\n  border-radius: 40px;\r\n  color: var(--white);\r\n  img {\r\n    position: absolute;\r\n    left: 15px;\r\n    top: 14px;\r\n    width: 30px;\r\n  }\r\n  input {\r\n    font-size: 28px;\r\n    position: absolute;\r\n    left: 0;\r\n    margin: 8px 0;\r\n    padding: 0 0 0 60px;\r\n    border: 0;\r\n    width: 95%;\r\n    background: transparent;\r\n    height: 40px;\r\n    color: var(--white);\r\n    :focus {\r\n      outline: none;\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\n// Image\r\nimport searchIcon from \"../../images/search-icon.svg\";\r\n\r\n// Styles\r\nimport { Wrapper, Content } from \"./SearchBar.styles\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nconst SearchBar = ({ setSearchTerm }) => {\r\n  const [state, setState] = useState(\"\");\r\n  const initial = useRef(true);\r\n  useEffect(() => {\r\n    if (initial.current) {\r\n      initial.current = false;\r\n      return;\r\n    }\r\n    const timer = setTimeout(() => {\r\n      setSearchTerm(state);\r\n    }, 500);\r\n    return () => clearTimeout(timer);\r\n  }, [setSearchTerm, state]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Content>\r\n        <img src={searchIcon} alt=\"search-icon\" />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search Movie\"\r\n          onChange={(event) => setState(event.currentTarget.value)}\r\n          value={state}\r\n        />\r\n      </Content>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\n// Typechecking\r\nSearchBar.propTypes = {\r\n  callback: PropTypes.func,\r\n};\r\nexport default SearchBar;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.button`\r\n  display: block;\r\n  background: var(--darkGrey);\r\n  width: 25%;\r\n  min-width: 200px;\r\n  height: 60px;\r\n  border-radius: 30px;\r\n  color: var(--white);\r\n  border: 0;\r\n  font-size: var(--fontBig);\r\n  margin: 20px auto;\r\n  transition: all 0.3s;\r\n  outline: none;\r\n  cursor: pointer;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n`;\r\n","import React from \"react\";\r\n// Styles\r\nimport { Wrapper } from \"./Button.styles\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nconst Button = ({ text, callback }) => (\r\n  <Wrapper type=\"button\" onClick={callback}>\r\n    {text}\r\n  </Wrapper>\r\n);\r\n\r\n// Typechecking\r\nButton.propTypes = {\r\n  text: PropTypes.string,\r\n  callback: PropTypes.func,\r\n};\r\n\r\nexport default Button;\r\n","import {\r\n  SEARCH_BASE_URL,\r\n  POPULAR_BASE_URL,\r\n  API_URL,\r\n  API_KEY,\r\n  REQUEST_TOKEN_URL,\r\n  LOGIN_URL,\r\n  SESSION_ID_URL\r\n} from './config';\r\n\r\nconst defaultConfig = {\r\n  method: 'POST',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\nconst apiSettings = {\r\n  fetchMovies: async (searchTerm, page) => {\r\n    const endpoint = searchTerm\r\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\r\n      : `${POPULAR_BASE_URL}&page=${page}`;\r\n    return await (await fetch(endpoint)).json();\r\n  },\r\n  fetchMovie: async movieId => {\r\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\r\n    return await (await fetch(endpoint)).json();\r\n  },\r\n  fetchCredits: async movieId => {\r\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\r\n    return await (await fetch(creditsEndpoint)).json();\r\n  },\r\n  // Bonus material below for login\r\n  getRequestToken: async () => {\r\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\r\n    return reqToken.request_token;\r\n  },\r\n  authenticate: async (requestToken, username, password) => {\r\n    const bodyData = {\r\n      username,\r\n      password,\r\n      request_token: requestToken\r\n    };\r\n    // First authenticate the requestToken\r\n    const data = await (\r\n      await fetch(LOGIN_URL, {\r\n        ...defaultConfig,\r\n        body: JSON.stringify(bodyData)\r\n      })\r\n    ).json();\r\n    // Then get the sessionId with the requestToken\r\n    if (data.success) {\r\n      const sessionId = await (\r\n        await fetch(SESSION_ID_URL, {\r\n          ...defaultConfig,\r\n          body: JSON.stringify({ request_token: requestToken })\r\n        })\r\n      ).json();\r\n      return sessionId;\r\n    }\r\n  },\r\n  rateMovie: async (sessionId, movieId, value) => {\r\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\r\n\r\n    const rating = await (\r\n      await fetch(endpoint, {\r\n        ...defaultConfig,\r\n        body: JSON.stringify({ value })\r\n      })\r\n    ).json();\r\n\r\n    return rating;\r\n  }\r\n};\r\n\r\nexport default apiSettings;\r\n","// Convert time to hours and minutes\r\nexport const calcTime = time => {\r\n  const hours = Math.floor(time / 60);\r\n  const mins = time % 60;\r\n  return `${hours}h ${mins}m`;\r\n};\r\n// Convert a number to money formatting\r\nexport const convertMoney = money => {\r\n  const formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: 0,\r\n  });\r\n  return formatter.format(money);\r\n};\r\n\r\nexport const isPersistedState = stateName =>{\r\n  const sessionState = sessionStorage.getItem(stateName);\r\n  return sessionState && JSON.parse(sessionState);\r\n}\r\n","import { useEffect, useState, useRef } from \"react\";\r\n//API\r\nimport API from \"../API\";\r\n\r\n// helpers\r\nimport { isPersistedState } from \"../helpers\";\r\n\r\nconst initialState = {\r\n  page: 0,\r\n  results: [],\r\n  total_pages: 0,\r\n  tota_results: 0,\r\n};\r\n\r\nexport const useHomeFetch = () => {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [state, setState] = useState(initialState);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [isLoadingMore, setLoadingMore] = useState(false);\r\n\r\n  // console.log(searchTerm);\r\n  const fetchMovies = async (page, searchTerm = \"\") => {\r\n    try {\r\n      setError(false);\r\n      setLoading(true);\r\n      const movies = await API.fetchMovies(searchTerm, page);\r\n\r\n      setState((prev) => ({\r\n        ...movies,\r\n        results:\r\n          page > 1 ? [...prev.results, ...movies.results] : [...movies.results],\r\n      }));\r\n    } catch (error) {\r\n      setError(true);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // Search and initial\r\n  useEffect(() => {\r\n    if (!searchTerm) {\r\n      const sessionState = isPersistedState(\"homeState\");\r\n      if (sessionState) {\r\n        setState(sessionState);\r\n        return;\r\n      }\r\n    }\r\n    setState(initialState);\r\n    fetchMovies(1, searchTerm);\r\n  }, [searchTerm]);\r\n\r\n  // Load More\r\n  useEffect(() => {\r\n    if (!isLoadingMore) return;\r\n    fetchMovies(state.page + 1, searchTerm);\r\n    setLoadingMore(false);\r\n  }, [isLoadingMore, searchTerm, state.page]);\r\n\r\n  // Write to Session Storage\r\n  useEffect(() => {\r\n    if (!searchTerm) sessionStorage.setItem(\"homeState\", JSON.stringify(state));\r\n  }, [searchTerm, state]);\r\n  return { state, loading, error, searchTerm, setSearchTerm, setLoadingMore };\r\n};\r\n","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","import React, { useState, useEffect } from \"react\";\r\n\r\n// Config\r\n\r\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from \"../config\";\r\n// Components\r\nimport HeroImage from \"./HeroImage\";\r\nimport Grid from \"./Grid\";\r\nimport Thumb from \"./Thumb\";\r\nimport Spinner from \"./Spinner\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport Button from \"./Button\";\r\n// Hook\r\nimport { useHomeFetch } from \"../hooks/useHomeFetch\";\r\n\r\n// Image\r\nimport NoImage from \"../images/no_image.jpg\";\r\n\r\nconst Home = () => {\r\n  const {\r\n    state,\r\n    loading,\r\n    error,\r\n    searchTerm,\r\n    setSearchTerm,\r\n    setLoadingMore,\r\n  } = useHomeFetch();\r\n  console.log(state);\r\n  if (error) return <div>Something went wrong...</div>;\r\n  return (\r\n    <>\r\n      {state.results[0] ? (\r\n        <HeroImage\r\n          image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\r\n          title={state.results[0].original_title}\r\n          text={state.results[0].overview}\r\n        />\r\n      ) : null}\r\n      <SearchBar setSearchTerm={setSearchTerm} />\r\n      <Grid\r\n        header={\r\n          searchTerm ? \"Search Result for \" + searchTerm : \"Popular Movies\"\r\n        }\r\n      >\r\n        {state.results.map((movie) => (\r\n          <Thumb\r\n            key={movie.id}\r\n            clickable\r\n            image={\r\n              movie.poster_path\r\n                ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path\r\n                : NoImage\r\n            }\r\n            movieId={movie.id}\r\n          />\r\n        ))}\r\n      </Grid>\r\n      {loading && <Spinner />}\r\n      {state.page < state.total_pages && !loading && (\r\n        <Button text=\"Load More\" callback={() => setLoadingMore(true)} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import styled from \"styled-components\";\r\n\r\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from \"../../config\";\r\n\r\nexport const Wrapper = styled.div`\r\n  background: ${({ backdrop }) =>\r\n    backdrop ? `url(${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop})` : \"#000\"};\r\n  background-size: cover;\r\n  background-position: center;\r\n  padding: 40px 20px;\r\n  animation: animateMovieInfo 1s;\r\n  @keyframes animateMovieInfo {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  max-width: var(--maxWidth);\r\n  margin: 0 auto;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  border-radius: 20px;\r\n  @media screen and (max-width: 768px) {\r\n    display: block;\r\n    max-height: none;\r\n  }\r\n`;\r\n\r\nexport const Text = styled.div`\r\n  width: 100%;\r\n  padding: 20px 40px;\r\n  color: var(--white);\r\n  overflow: hidden;\r\n  .rating-directors {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n  }\r\n\r\n  .score {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 35px;\r\n    height: 35px;\r\n    background: #fff;\r\n    color: #000;\r\n    font-weight: 800;\r\n    border-radius: 50%;\r\n    margin: 0;\r\n  }\r\n  .director {\r\n    margin: 0 0 0 40px;\r\n    p {\r\n      margin: 0;\r\n    }\r\n  }\r\n\r\n  h1 {\r\n    @media screen and (max-width: 768px) {\r\n      font-size: var(--fontBig);\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\n\r\n// Components\r\nimport Thumb from \"../Thumb\";\r\n\r\n// Config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from \"../../config\";\r\n\r\n// Image\r\nimport NoImage from \"../../images/no_image.jpg\";\r\n\r\n// Styles\r\nimport { Wrapper, Content } from \"./MovieInfo.styles\";\r\nimport { Text } from \"./MovieInfo.styles\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nconst MovieInfo = ({ movie }) => (\r\n  <Wrapper backdrop={movie.backdrop_path}>\r\n    <Content>\r\n      <Thumb\r\n        image={\r\n          movie.poster_path\r\n            ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path\r\n            : NoImage\r\n        }\r\n        clickable={false}\r\n      />\r\n      <Text>\r\n        <h1>{movie.title}</h1>\r\n        <h3>PLOT</h3>\r\n        <p>{movie.overview}</p>\r\n        <div className=\"rating-directors\">\r\n          <div>\r\n            <h3>RATING</h3>\r\n            <div className=\"score\">{movie.vote_average}</div>\r\n          </div>\r\n          <div className=\"director\">\r\n            <h3>DIRECTOR{movie.directors.length > 1 ? \"S\" : \"\"}</h3>\r\n            {movie.directors.map((director) => (\r\n              <p key={director.credit_id}>{director.name}</p>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </Text>\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\n// Typechecking\r\nMovieInfo.propTypes = {\r\n  movie: PropTypes.object,\r\n};\r\nexport default MovieInfo;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  min-height: 100px;\r\n  background: var(--darkGrey);\r\n  padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  max-width: var(--maxWidth);\r\n  width: 100%;\r\n  margin: 0 auto;\r\n\r\n  .column {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background: var(--medGrey);\r\n    margin: 0 20px;\r\n    flex: 1;\r\n\r\n    :first-child {\r\n      margin-left: 0;\r\n    }\r\n    :last-child {\r\n      margin-right: 0;\r\n    }\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    display: block;\r\n    .column {\r\n      margin: 20px 0;\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\n\r\n// Helpers\r\nimport { calcTime, convertMoney } from \"../../helpers\";\r\n\r\n// Styles\r\nimport { Wrapper, Content } from \"./MovieInfoBar.styles\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nconst MovieInfoBar = ({ time, budget, revenue }) => (\r\n  <Wrapper>\r\n    <Content>\r\n      <div className=\"column\">\r\n        <p>Running time: {calcTime(time)}</p>\r\n      </div>\r\n      <div className=\"column\">\r\n        <p>Budget: {convertMoney(budget)}</p>\r\n      </div>\r\n      <div className=\"column\">\r\n        <p>Revenue: {convertMoney(revenue)}</p>\r\n      </div>\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\n// Typechecking\r\nMovieInfoBar.propTypes = {\r\n  time: PropTypes.number,\r\n  budget: PropTypes.number,\r\n  revenue: PropTypes.number,\r\n};\r\n\r\nexport default MovieInfoBar;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  color: var(--white);\r\n  background: var(--darkGrey);\r\n  border-radius: 20px;\r\n  padding: 5px;\r\n  text-align: center;\r\n\r\n  h3 {\r\n    margin: 10px 0 0 0;\r\n  }\r\n  p {\r\n    margin: 5px 0;\r\n  }\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  display: block;\r\n  width: 100%;\r\n  height: 200px;\r\n  object-fit: cover;\r\n  border-radius: 15px;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\n// Styles\r\nimport { Wrapper, Image } from \"./Actor.styles\";\r\n\r\nconst Actor = ({ name, character, imageUrl }) => (\r\n  <Wrapper>\r\n    <Image src={imageUrl} alt=\"actor-thumb\" />\r\n    <h3>{name}</h3>\r\n    <p>{character}</p>\r\n  </Wrapper>\r\n);\r\n\r\n// Typechecking\r\n\r\nActor.propTypes = {\r\n  name: PropTypes.string,\r\n  character: PropTypes.string,\r\n  imageUrl: PropTypes.string,\r\n};\r\n\r\nexport default Actor;\r\n","import styled from \"styled-components\";\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 70px;\r\n  background: var(--medGrey);\r\n  color: var(--white);\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  max-width: var(--maxWidth);\r\n  padding: 0 20px;\r\n  span {\r\n    font-size: var(--fontMed);\r\n    color: var(--white);\r\n    padding-right: 10px;\r\n    @media screen and (max-width: 768px) {\r\n      font-size: var(--fontSmall);\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n// Styles\r\nimport { Wrapper, Content } from \"./BreadCrumb.styles\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nconst BreadCrumb = ({ movieTitle }) => (\r\n  <Wrapper>\r\n    <Content>\r\n      <Link to=\"/\">\r\n        <span>Home</span>\r\n      </Link>\r\n      <span>|</span>\r\n      <span>{movieTitle}</span>\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\n// Typechecking\r\nBreadCrumb.propTypes = {\r\n  movieTitle: PropTypes.string,\r\n};\r\n\r\nexport default BreadCrumb;\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n// Config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from \"../config\";\r\n\r\n// Components\r\nimport Grid from \"./Grid\";\r\nimport Spinner from \"./Spinner\";\r\nimport MovieInfo from \"./MovieInfo\";\r\nimport MovieInfoBar from \"./MovieInfoBar\";\r\nimport Actor from \"./Actor\";\r\n\r\n// Hook\r\n\r\nimport { useMovieFetch } from \"../hooks/useMovieFetch\";\r\n// Image\r\nimport NoImage from \"../images/no_image.jpg\";\r\nimport BreadCrumb from \"./BreadCrumb\";\r\n\r\nconst Movie = () => {\r\n  const { movieId } = useParams();\r\n  const { state: movie, loading, error } = useMovieFetch(movieId);\r\n  if (loading) return <Spinner />;\r\n  if (error) return <div>Something Went Wrong</div>;\r\n  console.log(movie);\r\n  return (\r\n    <>\r\n      <BreadCrumb movieTitle={movie.original_title} />\r\n      <MovieInfo movie={movie} />\r\n      <MovieInfoBar\r\n        time={movie.runtime}\r\n        budget={movie.budget}\r\n        revenue={movie.revenue}\r\n      />\r\n      <Grid header=\"Actors\">\r\n        {movie.actors.map((actor) => (\r\n          <Actor\r\n            key={actor.credit_id}\r\n            name={actor.name}\r\n            character={actor.character}\r\n            imageUrl={\r\n              actor.profile_path\r\n                ? IMAGE_BASE_URL + POSTER_SIZE + actor.profile_path\r\n                : NoImage\r\n            }\r\n          />\r\n        ))}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Movie;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport API from \"../API\";\r\nimport { isPersistedState } from \"../helpers\";\r\n\r\nexport const useMovieFetch = (movieId) => {\r\n  const [state, setState] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchMovie = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(false);\r\n        const movie = await API.fetchMovie(movieId);\r\n        const credits = await API.fetchCredits(movieId);\r\n        // Get Directors only\r\n        const directors = credits.crew.filter(\r\n          (member) => member.job === \"Director\"\r\n        );\r\n        setState({\r\n          ...movie,\r\n          actors: credits.cast,\r\n          directors,\r\n        });\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setError(true);\r\n      }\r\n    };\r\n    const sessionState = isPersistedState(movieId);\r\n    if (sessionState) {\r\n      setState(sessionState);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    fetchMovie();\r\n  }, [movieId]);\r\n\r\n  // Write to session Storage\r\n  useEffect(() => {\r\n    sessionStorage.setItem(movieId, JSON.stringify(state));\r\n  }, [movieId, state]);\r\n  return { state, loading, error };\r\n};\r\n","import React from \"react\";\r\n\r\nconst NotFound = () => <div>NotFound</div>;\r\n\r\nexport default NotFound;\r\n","import {createGlobalStyle} from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle `\r\n\r\n        :root{\r\n            --maxWidth: 1200px;\r\n            --white: #fff;\r\n            --lightGrey: #eee;\r\n            --medGrey: #353535;\r\n            --darkGrey: #1c1c1c;\r\n            --fontSuperbig: 2.5rem;\r\n            --fontBig: 1.5rem;\r\n            --fontMed: 1.2rem;\r\n            --fontSmall: 1rem;\r\n        }\r\n\r\n        *{\r\n            box-sizing: border-box;\r\n            font-family: 'Abel', sans-serif;\r\n        }\r\n        body{\r\n            margin: 0;\r\n            padding: 0;\r\n            h1{\r\n                font-size: 2rem;\r\n                font-weight: 600;\r\n                color: var(--white);\r\n            }\r\n            h3{\r\n                font-size: 1.1rem;\r\n                font-weight: 600;\r\n            }\r\n            p{\r\n                font-size: 1rem;\r\n                color: var(--white);\r\n            }\r\n        }\r\n\r\n\r\n\r\n`","import React from \"react\";\r\n\r\n// Routing\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\n\r\n// Components\r\nimport Header from \"./components/Header\";\r\nimport Home from \"./components/Home\";\r\nimport Movie from \"./components/Movie\";\r\nimport NotFound from \"./components/NotFound\";\r\n\r\n// Styles\r\nimport { GlobalStyle } from \"./GlobalStyle\";\r\n\r\nconst App = () => (\r\n  <Router>\r\n    <Header />\r\n    <Routes>\r\n      <Route path=\"/\" element={<Home />} />\r\n      <Route path=\"/:movieId\" element={<Movie />} />\r\n      <Route path=\"/*\" element={<NotFound />} />\r\n    </Routes>\r\n    <GlobalStyle />\r\n  </Router>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}